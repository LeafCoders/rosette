# database.driverClassName=com.mysql.cj.jdbc.Driver
# database.url=jdbc:mysql://localhost:3306/spring_hibernate5_01?createDatabaseIfNotExist=true
# database.username=root
# database.password=root

# hibernate.dialect = org.hibernate.dialect.MySQLDialect
# hibernate.hbm2ddl.auto=create-drop
# hibernate.id.new_generator_mappings = false
# hibernate.show_sql = true 
# hibernate.format_sql = true 


# spring.datasource.url=jdbc:mysql://localhost:3306/test
# spring.datasource.username=root
# spring.datasource.password=root
# spring.jpa.show-sql=true
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect



# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "test" as database name and 
# "root" as username and password.
spring.datasource.useSSL = false
spring.datasource.url = jdbc:mysql://localhost:3306/test
spring.datasource.username = root
spring.datasource.password = root

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id "org.springframework.boot" version "2.2.6.RELEASE"
  id "io.spring.dependency-management" version "1.0.9.RELEASE"
  id "java"
}

group = "se.leafcoders"
sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

bootJar {
  archiveBaseName = "rosette"
  archiveVersion =  "${project.version}-SNAPSHOT"
}

repositories {
  mavenCentral()
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  implementation("org.springframework.boot:spring-boot-starter-mail")
  implementation("org.springframework.boot:spring-boot-starter-security")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  runtimeOnly("org.springframework.boot:spring-boot-devtools")
  runtimeOnly("mysql:mysql-connector-java")
  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.springframework.security:spring-security-test")
  testImplementation("org.mockito:mockito-core:2.11.0")

  // Lombok
  compileOnly("org.projectlombok:lombok:1.18.12")
  annotationProcessor("org.projectlombok:lombok:1.18.12")
  testCompileOnly("org.projectlombok:lombok:1.18.12")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.12")

  // Database migration
  implementation("org.flywaydb:flyway-core")

  implementation("io.jsonwebtoken:jjwt:0.4")

  // For ical feed
  implementation("net.sf.biweekly:biweekly:0.6.2")

  // Google common libraries
  implementation("com.google.guava:guava:21.0")

  // Thumbnailator
  implementation("net.coobird:thumbnailator:0.4.8")

  // MP3 audio support
  implementation("com.googlecode.soundlibs:mp3spi:1.9.5.4")
}

processResources {
  with copySpec {
    from 'src/main/resources'
    include '**/application*.yml'
    project.properties.findAll().each { prop ->
      if (prop.value != null) {
        filter(ReplaceTokens, tokens: [ ('project.' + prop.key): (String) prop.value ], beginToken: '\"@', endToken: '@\"')
      }
    }
  }  
}

task buildImage() {
  group "docker"
  description "Builds a docker image of the current version."

  dependsOn clean
  dependsOn bootJar
  tasks.findByName('bootJar').mustRunAfter('clean')

  doLast {
    exec {
      executable "docker"
      args "build", "--build-arg", "JAR_VERSION=${project.version}", "-t", "leafcoders/rosette:${project.version}", "."
    }
  }
}

wrapper {
  gradleVersion = "6.3"
}
